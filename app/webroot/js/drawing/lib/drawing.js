// Generated by CoffeeScript 1.3.3
var Drawing,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Drawing = (function() {

  function Drawing(id) {
    this.id = id;
    this.drawEnd = __bind(this.drawEnd, this);

    this.drawMove = __bind(this.drawMove, this);

    this.drawStart = __bind(this.drawStart, this);

    this.drawTouchEnd = __bind(this.drawTouchEnd, this);

    this.drawTouchStart = __bind(this.drawTouchStart, this);

    this.drawTouchMove = __bind(this.drawTouchMove, this);

    this.addTouchEvent = __bind(this.addTouchEvent, this);

    this.addEvent = __bind(this.addEvent, this);

    this.canvas = new _Canvas(this.id);
    this.canvas.lineRound();
    this.addEvents();
  }

  Drawing.prototype.addEvents = function() {
    var isTouch;
    isTouch = document.documentElement.ontouchstart !== void 0;
    if (isTouch) {
      this.addTouchEvent("touchstart", this.drawTouchStart);
      this.addTouchEvent("touchmove", this.drawTouchMove);
      return this.addTouchEvent("touchend", this.drawTouchEnd);
    } else {
      this.addEvent("mousedown", this.drawStart);
      this.addEvent("mousemove", this.drawMove);
      return this.addEvent("mouseup", this.drawEnd);
    }
  };

  Drawing.prototype.addEvent = function(type, func) {
    var _this = this;
    return $("#" + this.id).bind(type, function(e) {
      return func(e);
    });
  };

  Drawing.prototype.addTouchEvent = function(type, func) {
    var target,
      _this = this;
    target = document.getElementById("" + this.id);
    return target.addEventListener(type, function(e) {
      e.preventDefault();
      return func(e.touches[0]);
    }, false);
  };

  Drawing.prototype.drawTouchMove = function(e) {
    var coords;
    coords = offsetOn($("" + this.id), e);
    return this.canvas.fillLine(coords);
  };

  Drawing.prototype.drawTouchStart = function(e) {
    var coords;
    this.clicking = true;
    coords = offsetOn($("" + this.id), e);
    return this.canvas.fillLine(coords);
  };

  Drawing.prototype.drawTouchEnd = function(e) {
    this.canvas.clearPreCoords();
    return this.clicking = false;
  };

  Drawing.prototype.drawStart = function(e) {
    var coords;
    this.clicking = true;
    coords = {
      x: e.offsetX,
      y: e.offsetY
    };
    return this.canvas.fillLine(coords);
  };

  Drawing.prototype.drawMove = function(e) {
    var coords;
    coords = {
      x: e.offsetX,
      y: e.offsetY
    };
    if (this.clicking) {
      return this.canvas.fillLine(coords);
    }
  };

  Drawing.prototype.drawEnd = function(e) {
    this.canvas.clearPreCoords();
    return this.clicking = false;
  };

  Drawing.prototype.setColor = function(color) {
    return this.canvas.setColor(color);
  };

  Drawing.prototype.setBold = function(thickness) {
    return this.canvas.setSize(thickness);
  };

  Drawing.prototype.getImageData = function() {
    return this.canvas.save();
  };

  Drawing.prototype.upload = function() {
    var saveData, url;
    url = this.makeUrl();
    saveData = this.getImageData();
    saveData = saveData.replace('data:image/png;base64,', '');
    return $.ajax({
      url: url,
      type: "POST",
      data: {
        "img_file": saveData
      },
      success: function(res) {
        if (res) {
          return location.href = "/mypage";
        } else {
          return location.href = "/";
        }
      }
    });
  };

  Drawing.prototype.makeUrl = function() {
    ' abstract ';
    return "";
  };

  Drawing.prototype.clear = function() {
    return this.canvas.clear();
  };

  return Drawing;

})();
