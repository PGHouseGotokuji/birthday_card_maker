// Generated by CoffeeScript 1.3.3
var ImageComponent;

ImageComponent = (function() {

  function ImageComponent(src, type) {
    this.img = new Image();
    this.img.src = src;
    this.coords = {
      top: 0,
      left: 0
    };
    this.size = {
      width: 100,
      height: 100
    };
    this.focusSize = {
      width: 20,
      height: 20
    };
    this.flag = {
      focus: false
    };
    if (type === "touch") {
      this.inImage = this.touchInImage;
      this.onImage = this.touchOnImage;
      this.outImage = this.touchoutImage;
    } else if (type === "mouse") {
      this.inImage = this.mouseInImage;
      this.onImage = this.mouseOnImage;
      this.outImage = this.mouseoutImage;
    }
  }

  ImageComponent.prototype.rangeImageInCheck = function(point, coords, size) {
    var _ref, _ref1;
    if (coords == null) {
      coords = this.coords;
    }
    if (size == null) {
      size = this.size;
    }
    if ((coords.left <= (_ref = point.x) && _ref <= coords.left + size.width)) {
      if ((coords.top <= (_ref1 = point.y) && _ref1 <= coords.top + size.height)) {
        return true;
      }
    }
    return false;
  };

  ImageComponent.prototype.rangeFocusInCheck = function(point) {
    var focusPoint, focusPoints, index, _i, _len;
    focusPoints = this.generateFocusLeftTop();
    for (index = _i = 0, _len = focusPoints.length; _i < _len; index = ++_i) {
      focusPoint = focusPoints[index];
      if (this.rangeImageInCheck(point, focusPoint, this.focusSize)) {
        return index;
      }
    }
    return false;
  };

  ImageComponent.prototype.generateFocusPoints = function() {
    '左上から時計回り';
    return [
      {
        top: this.getTop(),
        left: this.getLeft()
      }, {
        top: this.getTop(),
        left: (this.getLeft() + this.getRight()) / 2
      }, {
        top: this.getTop(),
        left: this.getRight()
      }, {
        top: (this.getTop() + this.getBottom()) / 2,
        left: this.getRight()
      }, {
        top: this.getBottom(),
        left: this.getRight()
      }, {
        top: this.getBottom(),
        left: (this.getLeft() + this.getRight()) / 2
      }, {
        top: this.getBottom(),
        left: this.getLeft()
      }, {
        top: (this.getTop() + this.getBottom()) / 2,
        left: this.getLeft()
      }
    ];
  };

  ImageComponent.prototype.generateFocusLeftTop = function() {
    var element, list, retVal, _i, _len;
    list = this.generateFocusPoints();
    retVal = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      element = list[_i];
      retVal.push({
        top: element.top - this.focusSize.height / 2,
        left: element.left - this.focusSize.width / 2
      });
    }
    console.log(retVal);
    return retVal;
  };

  ImageComponent.prototype.getImage = function() {
    return this.img;
  };

  ImageComponent.prototype.getCoords = function() {
    return this.coords;
  };

  ImageComponent.prototype.addCoords = function(diff) {
    this.coords.left += diff.x;
    return this.coords.top += diff.y;
  };

  ImageComponent.prototype.addSize = function(diff) {
    console.log("diff");
    console.log(diff);
    this.size.width += diff.width;
    return this.size.height += diff.height;
  };

  ImageComponent.prototype.getSize = function() {
    return this.size;
  };

  ImageComponent.prototype.getLeft = function() {
    return this.coords.left;
  };

  ImageComponent.prototype.getTop = function() {
    return this.coords.top;
  };

  ImageComponent.prototype.getRight = function() {
    return this.coords.left + this.size.width;
  };

  ImageComponent.prototype.getBottom = function() {
    return this.coords.top + this.size.height;
  };

  ImageComponent.prototype.getWidth = function() {
    return this.size.width;
  };

  ImageComponent.prototype.getHeight = function() {
    return this.size.height;
  };

  ImageComponent.prototype.clearfocus = function() {
    return this.flag.focus = false;
  };

  ImageComponent.prototype.getfocus = function() {
    return this.flag.focus;
  };

  ImageComponent.prototype.focus = function() {
    return this.flag.focus = true;
  };

  return ImageComponent;

})();
