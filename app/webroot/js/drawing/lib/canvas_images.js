// Generated by CoffeeScript 1.3.3
var CanvasImages,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CanvasImages = (function(_super) {
  var cursors;

  __extends(CanvasImages, _super);

  cursors = ["nw-resize", "n-resize", "ne-resize", "e-resize", "se-resize", "s-resize", "sw-resize", "w-resize", "default"];

  function CanvasImages(id, flag, event) {
    var isTouch;
    this.id = id != null ? id : "canvas";
    if (flag == null) {
      flag = false;
    }
    if (event == null) {
      event = true;
    }
    this.mouseup = __bind(this.mouseup, this);

    this.mouseout = __bind(this.mouseout, this);

    this.mousemove = __bind(this.mousemove, this);

    this.mousedown = __bind(this.mousedown, this);

    this.touchend = __bind(this.touchend, this);

    this.touchmove = __bind(this.touchmove, this);

    this.touchstart = __bind(this.touchstart, this);

    CanvasImages.__super__.constructor.call(this, this.id, flag);
    this.imageList = [];
    this.touchComponent = null;
    this.flag = {
      focusClicking: false,
      clicking: false,
      focus: false,
      focusCursor: false
    };
    if (event) {
      isTouch = document.documentElement.ontouchstart !== void 0;
      if (isTouch) {
        this.setTouchEvent("touchstart", this.touchstart);
        this.setTouchEvent("touchmove", this.touchmove);
        this.setTouchEvent("touchend", this.touchend);
      } else {
        this.events = {
          "mousedown": this.mousedown,
          "mousemove": this.mousemove,
          "mouseup": this.mouseup,
          "mouseout": this.mouseout
        };
        this.setEvents();
      }
    }
  }

  CanvasImages.prototype.setTouchEvent = function(type, func) {
    var _this = this;
    return $("#" + this.id).on(type, function() {
      return func(event.targetTouches[0], event);
    });
  };

  CanvasImages.prototype.setEvents = function() {
    var func, key, _ref, _results;
    _ref = this.events;
    _results = [];
    for (key in _ref) {
      func = _ref[key];
      _results.push($("#" + this.id).on(key, func));
    }
    return _results;
  };

  CanvasImages.prototype.touchstart = function(e, ecore) {
    return this.mousedown(e, ecore);
  };

  CanvasImages.prototype.touchmove = function(e, ecore) {
    return this.mousemove(e, ecore);
  };

  CanvasImages.prototype.touchend = function(e, ecore) {
    return this.mouseup(e, ecore);
  };

  CanvasImages.prototype.mousedown = function(event, ecore) {
    var component, coords, i, index, _i, _len, _ref;
    if (ecore == null) {
      ecore = event;
    }
    'touch is image field or not';

    _ref = this.imageList;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      component = _ref[index];
      coords = offsetOn($("#" + this.id), event);
      i = component.rangeFocusInCheck(coords);
      if (i !== false) {
        this.flag.focusClicking = true;
        this.touchComponent = {
          x: event.pageX,
          y: event.pageY,
          index: index,
          focusPoint: i
        };
        component.focus();
        ecore.preventDefault();
        break;
      } else if (component.rangeImageInCheck(coords)) {
        this.flag.clicking = true;
        this.touchComponent = {
          x: event.pageX,
          y: event.pageY,
          index: index
        };
        component.focus();
        ecore.preventDefault();
        break;
      }
    }
    if (this.touchComponent === null) {
      return this.reDraw();
    }
  };

  CanvasImages.prototype.mousemove = function(event, ecore) {
    var component, coords, index;
    if (ecore == null) {
      ecore = event;
    }
    if (this.flag.clicking) {
      ecore.preventDefault();
      return this.rangeInAction(event);
    } else if (this.flag.focusClicking) {
      ecore.preventDefault();
      coords = offsetOn($("#" + this.id), event);
      component = this.imageList[this.touchComponent.index];
      return this.rangeFocusInAction(event);
    } else if (this.flag.focus) {
      component = this.imageList[this.touchComponent.index];
      coords = offsetOn($("#" + this.id), event);
      index = component.rangeFocusInCheck(coords);
      if (index !== false) {
        return this.focusCursorSet(index);
      } else {
        return this.focusCursorSet(cursors.length - 1);
      }
    }
  };

  CanvasImages.prototype.focusCursorSet = function(index) {
    return $("body").css({
      cursor: cursors[index]
    });
  };

  CanvasImages.prototype.mouseout = function(event, ecore) {
    if (ecore == null) {
      ecore = event;
    }
    return this.mouseup();
  };

  CanvasImages.prototype.mouseup = function(event, ecore) {
    if (ecore == null) {
      ecore = event;
    }
    return this.mouseupRoutine();
  };

  CanvasImages.prototype.mouseupRoutine = function() {
    if (this.flag.clicking) {
      this.flag.clicking = false;
      this.flag.focus = true;
    }
    if (this.flag.focusClicking) {
      return this.flag.focusClicking = false;
    }
  };

  CanvasImages.prototype.rangeInAction = function(event) {
    var coords, index;
    index = this.touchComponent.index;
    coords = {
      x: event.pageX - this.touchComponent.x,
      y: event.pageY - this.touchComponent.y
    };
    this.imageList[index].addCoords(coords);
    this.touchComponent.x = event.pageX;
    this.touchComponent.y = event.pageY;
    return this.reDraw();
  };

  CanvasImages.prototype.rangeFocusInAction = function(event) {
    var changex, changey, coords, focusPoint, index, size;
    focusPoint = this.touchComponent.focusPoint;
    index = this.touchComponent.index;
    changex = event.pageX - this.touchComponent.x;
    changey = event.pageY - this.touchComponent.y;
    size = {
      width: 0,
      height: 0
    };
    coords = {
      x: 0,
      y: 0
    };
    if (focusPoint === 0 || focusPoint === 6 || focusPoint === 7) {
      size.width = -changex;
      coords.x = changex;
    } else if (focusPoint === 2 || focusPoint === 3 || focusPoint === 4) {
      size.width = changex;
    }
    if (focusPoint === 0 || focusPoint === 1 || focusPoint === 2) {
      size.height = -changey;
      coords.y = changey;
    } else if (focusPoint === 4 || focusPoint === 5 || focusPoint === 6) {
      size.height = changey;
    }
    this.imageList[index].addSize(size);
    this.imageList[index].addCoords(coords);
    this.touchComponent.x = event.pageX;
    this.touchComponent.y = event.pageY;
    return this.reDraw();
  };

  CanvasImages.prototype.inImage = function(src) {
    var imgComponent;
    imgComponent = new ImageComponent(src);
    return this.pushImage(imgComponent);
  };

  CanvasImages.prototype.gouseiImage = function(srcList) {
    var gouseiComponent;
    srcList = ['/img/hukidashi.jpeg', '/img/ken.jpg'];
    return gouseiComponent = new GouseiComponent(srcList);
  };

  CanvasImages.prototype.pushImage = function(imgComponent) {
    var img, self,
      _this = this;
    self = this;
    img = imgComponent.getImage();
    if (img.complete) {
      return self.pushComponent(imgComponent);
    } else {
      return img.onload = function() {
        return self.pushComponent(imgComponent);
      };
    }
  };

  CanvasImages.prototype.pushComponent = function(cmp) {
    this.componentDraw(cmp);
    return this.imageList.push(cmp);
  };

  CanvasImages.prototype.reDraw = function(withDot) {
    var component, _i, _len, _ref, _results;
    if (withDot == null) {
      withDot = true;
    }
    this.clear();
    _ref = this.imageList;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      component = _ref[_i];
      this.componentDraw(component);
      if (component.getfocus()) {
        if (withDot) {
          _results.push(this.componentFocusDraw(component));
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  CanvasImages.prototype.componentFocusDraw = function(component) {
    this.ctx.lineWidth = 5;
    return this.focusMousePoint(component);
  };

  CanvasImages.prototype.focusMousePoint = function(component) {
    var coords, size;
    size = 5;
    coords = {
      top: component.getTop(),
      left: component.getLeft(),
      bottom: component.getBottom(),
      right: component.getRight()
    };
    this.ctx.beginPath();
    this.ctx.arc(coords.left, coords.top, size, 0, Math.PI * 2, false);
    this.ctx.fill();
    this.ctx.beginPath();
    this.ctx.arc((coords.left + coords.right) / 2, coords.top, size, 0, Math.PI * 2, false);
    this.ctx.fill();
    this.ctx.beginPath();
    this.ctx.arc(coords.right, coords.top, size, 0, Math.PI * 2, false);
    this.ctx.fill();
    this.ctx.beginPath();
    this.ctx.arc(coords.right, (coords.top + coords.bottom) / 2, size, 0, Math.PI * 2, false);
    this.ctx.fill();
    this.ctx.beginPath();
    this.ctx.arc(coords.right, coords.bottom, size, 0, Math.PI * 2, false);
    this.ctx.fill();
    this.ctx.beginPath();
    this.ctx.arc((coords.left + coords.right) / 2, coords.bottom, size, 0, Math.PI * 2, false);
    this.ctx.fill();
    this.ctx.beginPath();
    this.ctx.arc(coords.left, coords.bottom, size, 0, Math.PI * 2, false);
    this.ctx.fill();
    this.ctx.beginPath();
    this.ctx.arc(coords.left, (coords.top + coords.bottom) / 2, size, 0, Math.PI * 2, false);
    return this.ctx.fill();
  };

  CanvasImages.prototype._drawFocusMousePoint = function(coords) {};

  CanvasImages.prototype.componentDraw = function(component) {
    return component.draw(this.ctx);
  };

  CanvasImages.prototype.getImageData = function() {
    return this.canvas.save();
  };

  return CanvasImages;

})(_Canvas);
