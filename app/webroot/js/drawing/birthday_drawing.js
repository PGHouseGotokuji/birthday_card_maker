// Generated by CoffeeScript 1.3.3
var BirthDrawing,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BirthDrawing = (function(_super) {

  __extends(BirthDrawing, _super);

  function BirthDrawing(canvas, planId) {
    BirthDrawing.__super__.constructor.call(this, canvas);
    this.planId = planId;
  }

  BirthDrawing.prototype.makeUrl = function() {
    var collaboratorId,
      _this = this;
    collaboratorId = "";
    $.ajax({
      url: "/get_user",
      method: "GET",
      async: false,
      dataType: "json",
      success: function(res) {
        return collaboratorId = res.User.id;
      }
    });
    return "/plan/" + this.planId + "/collaborator/" + collaboratorId + "/photo";
  };

  BirthDrawing.prototype.create_tools = function() {
    var boldList, boldTmpl, colorList, colorTmpl, ele, key, text, tmp, value, _i, _len;
    colorList = ["red", "pink", "yellow", "black", "white"];
    colorTmpl = "<li><a href='#' onclick='drawing.setColor(\"%s\");return false'>%s</a></li>";
    text = "";
    for (_i = 0, _len = colorList.length; _i < _len; _i++) {
      ele = colorList[_i];
      text += colorTmpl.replace(/%s/g, ele);
    }
    $("#drawing_color").append(text);
    boldList = {
      "細い": 1,
      "普通": 2,
      "太い": 3,
      "超太い": 10
    };
    boldTmpl = "<li><a href='#' onclick='drawing.setBold(%d);return false'>%s</a></li>";
    text = "";
    for (key in boldList) {
      value = boldList[key];
      tmp = boldTmpl.replace("%d", value);
      text += tmp.replace("%s", key);
    }
    return $("#drawing_bold").append(text);
  };

  return BirthDrawing;

})(Drawing);
